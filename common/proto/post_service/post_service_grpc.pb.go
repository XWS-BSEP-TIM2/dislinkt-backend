// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: post_service/post_service.proto

package post_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	GetPosts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MultiplePostsResponse, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*PostResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*PostResponse, error)
	GetPostsFromUser(ctx context.Context, in *GetPostsFromUserRequest, opts ...grpc.CallOption) (*MultiplePostsResponse, error)
	// comments
	GetComments(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*MultipleCommentsResponse, error)
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	GetComment(ctx context.Context, in *GetSubresourceRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	// likes
	GetLikes(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*MultipleReactionsResponse, error)
	GiveLike(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*ReactionResponse, error)
	GetLike(ctx context.Context, in *GetSubresourceRequest, opts ...grpc.CallOption) (*ReactionResponse, error)
	UndoLike(ctx context.Context, in *GetSubresourceRequest, opts ...grpc.CallOption) (*EmptyRequest, error)
	// dislikes
	GetDislikes(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*MultipleReactionsResponse, error)
	GiveDislike(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*ReactionResponse, error)
	GetDislike(ctx context.Context, in *GetSubresourceRequest, opts ...grpc.CallOption) (*ReactionResponse, error)
	UndoDislike(ctx context.Context, in *GetSubresourceRequest, opts ...grpc.CallOption) (*EmptyRequest, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) GetPosts(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*MultiplePostsResponse, error) {
	out := new(MultiplePostsResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/GetPosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPostsFromUser(ctx context.Context, in *GetPostsFromUserRequest, opts ...grpc.CallOption) (*MultiplePostsResponse, error) {
	out := new(MultiplePostsResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/GetPostsFromUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetComments(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*MultipleCommentsResponse, error) {
	out := new(MultipleCommentsResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetComment(ctx context.Context, in *GetSubresourceRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetLikes(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*MultipleReactionsResponse, error) {
	out := new(MultipleReactionsResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/GetLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GiveLike(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*ReactionResponse, error) {
	out := new(ReactionResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/GiveLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetLike(ctx context.Context, in *GetSubresourceRequest, opts ...grpc.CallOption) (*ReactionResponse, error) {
	out := new(ReactionResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/GetLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UndoLike(ctx context.Context, in *GetSubresourceRequest, opts ...grpc.CallOption) (*EmptyRequest, error) {
	out := new(EmptyRequest)
	err := c.cc.Invoke(ctx, "/post_service.PostService/UndoLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetDislikes(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*MultipleReactionsResponse, error) {
	out := new(MultipleReactionsResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/GetDislikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GiveDislike(ctx context.Context, in *CreateReactionRequest, opts ...grpc.CallOption) (*ReactionResponse, error) {
	out := new(ReactionResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/GiveDislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetDislike(ctx context.Context, in *GetSubresourceRequest, opts ...grpc.CallOption) (*ReactionResponse, error) {
	out := new(ReactionResponse)
	err := c.cc.Invoke(ctx, "/post_service.PostService/GetDislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UndoDislike(ctx context.Context, in *GetSubresourceRequest, opts ...grpc.CallOption) (*EmptyRequest, error) {
	out := new(EmptyRequest)
	err := c.cc.Invoke(ctx, "/post_service.PostService/UndoDislike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility
type PostServiceServer interface {
	GetPosts(context.Context, *EmptyRequest) (*MultiplePostsResponse, error)
	CreatePost(context.Context, *CreatePostRequest) (*PostResponse, error)
	GetPost(context.Context, *GetPostRequest) (*PostResponse, error)
	GetPostsFromUser(context.Context, *GetPostsFromUserRequest) (*MultiplePostsResponse, error)
	// comments
	GetComments(context.Context, *GetPostRequest) (*MultipleCommentsResponse, error)
	CreateComment(context.Context, *CreateCommentRequest) (*CommentResponse, error)
	GetComment(context.Context, *GetSubresourceRequest) (*CommentResponse, error)
	// likes
	GetLikes(context.Context, *GetPostRequest) (*MultipleReactionsResponse, error)
	GiveLike(context.Context, *CreateReactionRequest) (*ReactionResponse, error)
	GetLike(context.Context, *GetSubresourceRequest) (*ReactionResponse, error)
	UndoLike(context.Context, *GetSubresourceRequest) (*EmptyRequest, error)
	// dislikes
	GetDislikes(context.Context, *GetPostRequest) (*MultipleReactionsResponse, error)
	GiveDislike(context.Context, *CreateReactionRequest) (*ReactionResponse, error)
	GetDislike(context.Context, *GetSubresourceRequest) (*ReactionResponse, error)
	UndoDislike(context.Context, *GetSubresourceRequest) (*EmptyRequest, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (UnimplementedPostServiceServer) GetPosts(context.Context, *EmptyRequest) (*MultiplePostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedPostServiceServer) CreatePost(context.Context, *CreatePostRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostServiceServer) GetPost(context.Context, *GetPostRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedPostServiceServer) GetPostsFromUser(context.Context, *GetPostsFromUserRequest) (*MultiplePostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsFromUser not implemented")
}
func (UnimplementedPostServiceServer) GetComments(context.Context, *GetPostRequest) (*MultipleCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedPostServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedPostServiceServer) GetComment(context.Context, *GetSubresourceRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedPostServiceServer) GetLikes(context.Context, *GetPostRequest) (*MultipleReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikes not implemented")
}
func (UnimplementedPostServiceServer) GiveLike(context.Context, *CreateReactionRequest) (*ReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveLike not implemented")
}
func (UnimplementedPostServiceServer) GetLike(context.Context, *GetSubresourceRequest) (*ReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLike not implemented")
}
func (UnimplementedPostServiceServer) UndoLike(context.Context, *GetSubresourceRequest) (*EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoLike not implemented")
}
func (UnimplementedPostServiceServer) GetDislikes(context.Context, *GetPostRequest) (*MultipleReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDislikes not implemented")
}
func (UnimplementedPostServiceServer) GiveDislike(context.Context, *CreateReactionRequest) (*ReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveDislike not implemented")
}
func (UnimplementedPostServiceServer) GetDislike(context.Context, *GetSubresourceRequest) (*ReactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDislike not implemented")
}
func (UnimplementedPostServiceServer) UndoDislike(context.Context, *GetSubresourceRequest) (*EmptyRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoDislike not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/GetPosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPosts(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPostsFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPostsFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/GetPostsFromUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPostsFromUser(ctx, req.(*GetPostsFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetComments(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubresourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetComment(ctx, req.(*GetSubresourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/GetLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetLikes(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GiveLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GiveLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/GiveLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GiveLike(ctx, req.(*CreateReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubresourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/GetLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetLike(ctx, req.(*GetSubresourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UndoLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubresourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UndoLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/UndoLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UndoLike(ctx, req.(*GetSubresourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetDislikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetDislikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/GetDislikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetDislikes(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GiveDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GiveDislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/GiveDislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GiveDislike(ctx, req.(*CreateReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubresourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetDislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/GetDislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetDislike(ctx, req.(*GetSubresourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UndoDislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubresourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UndoDislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_service.PostService/UndoDislike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UndoDislike(ctx, req.(*GetSubresourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post_service.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPosts",
			Handler:    _PostService_GetPosts_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _PostService_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _PostService_GetPost_Handler,
		},
		{
			MethodName: "GetPostsFromUser",
			Handler:    _PostService_GetPostsFromUser_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _PostService_GetComments_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _PostService_CreateComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _PostService_GetComment_Handler,
		},
		{
			MethodName: "GetLikes",
			Handler:    _PostService_GetLikes_Handler,
		},
		{
			MethodName: "GiveLike",
			Handler:    _PostService_GiveLike_Handler,
		},
		{
			MethodName: "GetLike",
			Handler:    _PostService_GetLike_Handler,
		},
		{
			MethodName: "UndoLike",
			Handler:    _PostService_UndoLike_Handler,
		},
		{
			MethodName: "GetDislikes",
			Handler:    _PostService_GetDislikes_Handler,
		},
		{
			MethodName: "GiveDislike",
			Handler:    _PostService_GiveDislike_Handler,
		},
		{
			MethodName: "GetDislike",
			Handler:    _PostService_GetDislike_Handler,
		},
		{
			MethodName: "UndoDislike",
			Handler:    _PostService_UndoDislike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post_service/post_service.proto",
}
