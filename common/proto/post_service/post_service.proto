syntax = "proto3";

option go_package = "common/proto/post_service";

package post_service;


import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service PostService{
  rpc GetPosts(EmptyRequest) returns(MultiplePostsResponse) {
    option (google.api.http) = {
      get: "/posts"
    };
  }
  rpc CreatePost(CreatePostRequest) returns(PostResponse) {
    option (google.api.http) = {
      post: "/posts"
      body: "new_post"
    };
  }
  rpc GetPost(GetPostRequest) returns(PostResponse) {
    option (google.api.http) = {
      get: "/posts/{post_id}"
    };
  }
  rpc GetPostsFromUser(GetPostsFromUserRequest) returns(MultiplePostsResponse) {
    option (google.api.http) = {
      get: "/posts/user/{user_id}"
    };
  }


  // comments
  rpc GetComments(GetPostRequest) returns(MultipleCommentsResponse) {
    option (google.api.http) = {
      get: "/posts/{post_id}/comments"
    };
  }
  rpc CreateComment(CreateCommentRequest) returns(CommentResponse) {
    option (google.api.http) = {
      post: "/posts/{post_id}/comments"
      body: "new_comment"
    };
  }
  rpc GetComment(GetSubresourceRequest) returns(CommentResponse) {
    option (google.api.http) = {
      get: "/posts/{post_id}/comments/{subresource_id}"
    };
  }

  // likes
  rpc GetLikes(GetPostRequest) returns(MultipleReactionsResponse) {
    option (google.api.http) = {
      get: "/posts/{post_id}/likes"
    };
  }
  rpc GiveLike(CreateReactionRequest) returns(ReactionResponse) {
    option (google.api.http) = {
      post: "/posts/{post_id}/likes"
      body: "new_reaction"
    };
  }
  rpc GetLike(GetSubresourceRequest) returns(ReactionResponse) {
    option (google.api.http) = {
      get: "/posts/{post_id}/likes/{subresource_id}"
    };
  }
  rpc UndoLike(GetSubresourceRequest) returns(EmptyRequest) {
    option (google.api.http) = {
      delete: "/posts/{post_id}/likes/{subresource_id}"
    };
  }

  // dislikes
  rpc GetDislikes(GetPostRequest) returns(MultipleReactionsResponse) {
    option (google.api.http) = {
      get: "/posts/{post_id}/dislikes"
    };
  }
  rpc GiveDislike(CreateReactionRequest) returns(ReactionResponse) {
    option (google.api.http) = {
      post: "/posts/{post_id}/dislikes"
      body: "new_reaction"
    };
  }
  rpc GetDislike(GetSubresourceRequest) returns(ReactionResponse) {
    option (google.api.http) = {
      get: "/posts/{post_id}/dislikes/{subresource_id}"
    };
  }
  rpc UndoDislike(GetSubresourceRequest) returns(EmptyRequest) {
    option (google.api.http) = {
      delete: "/posts/{post_id}/dislikes/{subresource_id}"
    };
  }

}

message EmptyRequest {
}

message Post {
//  Owner owner = 1;
  google.protobuf.Timestamp creation_time = 2;
  string content = 3;
  string image_base64 = 4;
  repeated string links = 5;
  repeated Href hrefs = 6;
  PostStats stats = 7;
}

message PostStats {
  int64 comments_number = 8;
  int64 likes_number = 9;
  int64 dislikes_number = 10;
}

message PostResponse {
      Post post = 1;
}

message MultiplePostsResponse {
    repeated Post posts = 1;
}

message CreatePostRequest {
  NewPost new_post = 1;
}

message NewPost {
  string owner_id = 1;
  string content = 2;
  string image_base64 = 3;
  repeated string links = 4;
}

message GetPostRequest {
  string post_id = 1;
}

message GetPostsFromUserRequest {
  string user_id = 1;
}

message Comment {
//  Owner owner = 1;
  google.protobuf.Timestamp creation_time = 2;
  string content = 3;
  repeated Href hrefs = 4;
}

message CommentResponse {
  Comment comment = 1;
}

message MultipleCommentsResponse {
  repeated Comment comments = 1;
}

message CreateCommentRequest {
  string post_id = 1;
  NewComment new_comment = 2;
}

message NewComment {
  string owner_id = 1;
  string content = 2;
}

message GetSubresourceRequest {
  string post_id = 1;
  string subresource_id = 2;
}

message Reaction {
  //  Owner owner = 1;
  google.protobuf.Timestamp creation_time = 2;
  string reaction_type = 3;
  repeated Href hrefs = 4;
}

message ReactionResponse {
  Reaction reaction = 1;
}

message MultipleReactionsResponse {
  repeated Reaction reactions = 1;
}

message CreateReactionRequest {
  string post_id = 1;
  NewReaction new_reaction = 2;
}

message NewReaction {
  string owner_id = 1;
}

message Href {
  string url=1;
  string rel=2;
}

message Owner {
  string username = 1;
  string name = 2;
  string surname = 3;
}
