version: "3.8"

x-logging: &fluent-bit
  driver: fluentd
  options:
    fluentd-address: ${FLUENT_BIT_ADDRESS}:24224

x-tracing: &jaeger-env
  JAEGER_AGENT_HOST: ${JAEGER_HOST}
  JAEGER_AGENT_PORT: 6831
  JAEGER_SAMPLER_MANAGER_HOST_PORT: ${JAEGER_HOST}:5778
  JAEGER_SAMPLER_TYPE: const
  JAEGER_SAMPLER_PARAM: 1

services:
  auth_service:
    image: auth_service
    container_name: auth_service
    build:
      context: .
      dockerfile: ./auth_service/Dockerfile
    restart: on-failure
    environment:
      <<: *jaeger-env
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      MONGO_DB_HOST: ${AUTH_MONGO_DB_HOST_DOCKER}
      MONGO_DB_PORT: ${MONGO_DB_PORT}      
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST_DOCKER}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      GATEWAY_HOST: ${GATEWAY_HOST_DOCKER}
      GATEWAY_PORT: ${GATEWAY_PORT}
      EMAIL_HOST: ${EMAIL_HOST_DOCKER}
      DISLINKT_EMAIL: ${DISLINKT_EMAIL}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      LOGGING_SERVICE_HOST: ${LOGGING_SERVICE_HOST_DOCKER}
      LOGGING_SERVICE_PORT: ${LOGGING_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
    volumes:
      - type: bind
        source: ./auth_service/certificates/
        target: /root/certificates
    logging:  *fluent-bit
    depends_on:
      - auth_mongo_db
      - nats
    networks:
      - network
      - monitoring

  post_service:
    image: post_service
    container_name: post_service
    build:
      context: .
      dockerfile: ./post_service/Dockerfile
    restart: on-failure
    environment:
      <<: *jaeger-env
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      MONGO_DB_HOST: ${POST_MONGO_DB_HOST_DOCKER}
      MONGO_DB_PORT: ${MONGO_DB_PORT}
      AUTH_SERVICE_HOST: ${AUTH_SERVICE_HOST_DOCKER}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST_DOCKER}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST_DOCKER}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      NOTIFICATION_SERVICE_HOST: ${NOTIFICATION_SERVICE_HOST_DOCKER}
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
      LOGGING_SERVICE_HOST: ${LOGGING_SERVICE_HOST_DOCKER}
      LOGGING_SERVICE_PORT: ${LOGGING_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
    volumes:
      - type: bind
        source: ./post_service/certificates/
        target: /root/certificates
      - type: bind
        source: ./post_service/startup/data/post_images
        target: /root/startup/data/post_images
    depends_on:
      - post_mongo_db
      - nats
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  profile_service:
    image: profile_service
    container_name: profile_service
    build:
      context: .
      dockerfile: ./profile_service/Dockerfile
    restart: on-failure
    environment:
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      MONGO_DB_HOST: ${PROFILE_MONGO_DB_HOST_DOCKER}
      MONGO_DB_PORT: ${MONGO_DB_PORT}
      LOGGING_SERVICE_HOST: ${LOGGING_SERVICE_HOST_DOCKER}
      LOGGING_SERVICE_PORT: ${LOGGING_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
      <<: *jaeger-env
    volumes:
      - type: bind
        source: ./profile_service/certificates/
        target: /root/certificates
    depends_on:
      - profile_mongo_db
      - nats
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  job_offer_service:
    image: job_offer_service
    container_name: job_offer_service
    build:
      context: .
      dockerfile: ./job_offer_service/Dockerfile
    restart: on-failure
    environment:
      <<: *jaeger-env
      JOB_OFFER_SERVICE_PORT: ${JOB_OFFER_SERVICE_PORT}
      JOB_OFFER_NEO4J_URI: ${JOB_OFFER_NEO4J_URI}
      JOB_OFFER_NEO4J_HOST: ${JOB_OFFER_NEO4J_HOST_DOCKER}
      JOB_OFFER_NEO4J_PORT: ${JOB_OFFER_NEO4J_PORT}
      JOB_OFFER_NEO4J_PORT_2: ${JOB_OFFER_NEO4J_PORT_2}
      JOB_OFFER_NEO4J_USERNAME: ${JOB_OFFER_NEO4J_USERNAME}
      JOB_OFFER_NEO4J_PASSWORD: ${JOB_OFFER_NEO4J_PASSWORD}
      LOGGING_SERVICE_PORT: ${LOGGING_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
    volumes:
      - type: bind
        source: ./job_offer_service/certificates/
        target: /root/certificates
    depends_on:
      - jobOfferNeo4j
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  message_service:
    image: message_service
    container_name: message_service
    build:
      context: .
      dockerfile: ./message_service/Dockerfile
    restart: on-failure
    environment:
      <<: *jaeger-env
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
      MONGO_DB_HOST: ${MESSAGE_DB_HOST_DOCKER}
      MONGO_DB_PORT: ${MONGO_DB_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST_DOCKER}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST_DOCKER}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      LOGGING_SERVICE_HOST: ${LOGGING_SERVICE_HOST_DOCKER}
      LOGGING_SERVICE_PORT: ${LOGGING_SERVICE_PORT}
      NOTIFICATION_SERVICE_HOST: ${NOTIFICATION_SERVICE_HOST_DOCKER}
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
    volumes:
      - type: bind
        source: ./message_service/certificates/
        target: /root/certificates
    depends_on:
      - message_mongo_db
      - nats
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  notification_service:
    image: notification_service
    container_name: notification_service
    build:
      context: .
      dockerfile: ./notification_service/Dockerfile
    restart: on-failure
    environment:
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
      MONGO_DB_HOST: ${NOTIFICATION_DB_HOST_DOCKER}
      MONGO_DB_PORT: ${MONGO_DB_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST_DOCKER}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST_DOCKER}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      LOGGING_SERVICE_HOST: ${LOGGING_SERVICE_HOST_DOCKER}
      LOGGING_SERVICE_PORT: ${LOGGING_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
    volumes:
      - type: bind
        source: ./notification_service/certificates/
        target: /root/certificates
    depends_on:
      - notification_mongo_db
      - nats
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  logging_service:
    image: logging_service
    container_name: logging_service
    build:
      context: .
      dockerfile: ./logging_service/Dockerfile
    restart: on-failure
    environment:
      LOGGING_SERVICE_HOST: ${LOGGING_SERVICE_HOST_DOCKER}
      LOGGING_SERVICE_PORT: ${LOGGING_SERVICE_PORT}
      LOGGING_FILE_PATH: ${LOGGING_FILE_PATH}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
    volumes:
      - type: bind
        source: ./logging_service/certificates/
        target: /root/certificates
      - type: bind
        source: ./logging_service/logData/
        target: /root/logData
    depends_on:
      - nats
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      POST_SERVICE_HOST: ${POST_SERVICE_HOST_DOCKER}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      AUTH_SERVICE_HOST: ${AUTH_SERVICE_HOST_DOCKER}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST_DOCKER}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST_DOCKER}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      JOB_OFFER_SERVICE_HOST: ${JOB_OFFER_SERVICE_HOST_DOCKER}
      JOB_OFFER_SERVICE_PORT: ${JOB_OFFER_SERVICE_PORT}
      MESSAGE_SERVICE_HOST: ${MESSAGE_SERVICE_HOST_DOCKER}
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
      NOTIFICATION_SERVICE_HOST: ${NOTIFICATION_SERVICE_HOST_DOCKER}
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
      LOGGING_SERVICE_HOST: ${LOGGING_SERVICE_HOST_DOCKER}
      LOGGING_SERVICE_PORT: ${LOGGING_SERVICE_PORT}
      CERTIFICATE_PATH: ${CERTIFICATE_PATH}
      CERTIFICATE_PRIVATE_KEY_PATH: ${CERTIFICATE_PRIVATE_KEY_PATH}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
      <<: *jaeger-env
    volumes:
      - type: bind
        source: ./api_gateway/certificates/
        target: /root/certificates
      - type: bind
        source: ./logging_service/logData/
        target: /root/logData
      - type: bind
        source: ./api_gateway/security/
        target: /root/security
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  connection_service:
    image: connection_service
    container_name: connection_service
    build:
      context: .
      dockerfile: ./connection_service/Dockerfile
    restart: on-failure
    environment:
      <<: *jaeger-env
      CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST_DOCKER}
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      NEO4J_URI: ${NEO4J_URI}
      NEO4J_HOST: ${NEO4J_HOST_DOCKER}
      NEO4J_PORT: ${NEO4J_PORT}
      NEO4J_USERNAME: ${NEO4J_USERNAME}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      LOGGING_SERVICE_HOST: ${LOGGING_SERVICE_HOST_DOCKER}
      LOGGING_SERVICE_PORT: ${LOGGING_SERVICE_PORT}
      NOTIFICATION_SERVICE_HOST: ${NOTIFICATION_SERVICE_HOST_DOCKER}
      NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
      PROFILE_SERVICE_HOST: ${PROFILE_SERVICE_HOST_DOCKER}
      PROFILE_SERVICE_PORT: ${PROFILE_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
      REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
    volumes:
      - type: bind
        source: ./connection_service/certificates/
        target: /root/certificates
    depends_on:
      - neo4j
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  auth_mongo_db:
    image: mongo
    container_name: auth_mongo_db
    command: mongod --quiet --logpath /dev/null
    restart: on-failure
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  profile_mongo_db:
    image: mongo
    container_name: profile_mongo_db
    command: mongod --quiet --logpath /dev/null
    restart: on-failure
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  post_mongo_db:
    image: mongo
    container_name: post_mongo_db
    command: mongod --quiet --logpath /dev/null
    restart: on-failure
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  message_mongo_db:
    image: mongo
    container_name: message_mongo_db
    command: mongod --quiet --logpath /dev/null
    restart: on-failure
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  notification_mongo_db:
    image: mongo
    container_name: notification_mongo_db
    command: mongod --quiet --logpath /dev/null
    restart: on-failure
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  neo4j:
    image: neo4j:4.3.3
    container_name: neo4j
    hostname: neo4j
    restart: on-failure
    environment:
      NEO4J_AUTH: none
      NEO4J_dbms_allow__upgrade: true
    ports:
      - ${NEO4J_PORT}:${NEO4J_PORT}
      - ${NEO4J_PORT_2}:${NEO4J_PORT_2}
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  jobOfferNeo4j:
    image: neo4j:4.3.3
    container_name: jobOfferNeo4j
    hostname: jobOfferNeo4j
    restart: on-failure
    environment:
      NEO4J_AUTH: none
      NEO4J_dbms_allow__upgrade: true
      NEO4J_dbms_connector_bolt_listen__address: ":7686"
    ports:
      - ${JOB_OFFER_NEO4J_PORT}:${JOB_OFFER_NEO4J_PORT}
      - ${JOB_OFFER_NEO4J_PORT_2}:${JOB_OFFER_NEO4J_PORT_2}
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

  nats:
    image: nats
    container_name: nats
    hostname: ${NATS_HOST}
    restart: on-failure
    expose:
      - "4222"
    ports:
      - "4222:4222"
      - "6222:6222"
      - "8222:8222"
    environment:
      NATS_ENABLE_AUTH: yes
      NATS_USERNAME: ${NATS_USER}
      NATS_PASSWORD: ${NATS_PASS}
      NATS_CLIENT_PORT_NUMBER: ${NATS_PORT}
      NATS_BIND_ADDRESS: ${NATS_HOST}
    logging:  *fluent-bit
    networks:
      - network
      - monitoring

networks:
  network:
    driver: bridge
  monitoring:
    external: true